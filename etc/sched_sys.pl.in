#!@PERL@
# This script writes out the date to standard output in various formats
#
# Command line arguments
#
# -a                   Run for archive time, specified by number of seconds since
#                      Jan 1 1970 at 0000 UTC
#
# -A                   Run for input analysis time specified as dd-mmm-yyyy-hhmm
#                      which can also be a substitute input for archive time
#                      Eg., 28-Aug-2002-1200. Purger is not run unless -r or -t is
#                      specified.
#
# -d                   Delay in hours (lag time or displaced real-time). This generally 
#                      should be set in cases where the wall clock time of the run will 
#                      differ from the analysis time by more than the laps cycle time.
#
# -e                   Extend time in hours (allow for long runs beyond cycle time)
#
#
# -r -m N              where "N" is the (default) maximum number of files 
#                      to be kept in each product directory by the purger
#
# -l                   Write logs in LAPS_DATA_ROOT/log, even if on AWIPS
#
# -p T                 Advance analyses by T minutes for balanced output at systime + T
#
# -f                   format to print date in, yydddhhmm     (default if not specified)
#                                               mm            (month)
#                                               yyyymmdd_hhmm (13 character date)
#                                               yyyymmddhhmm (12 character date)
#                                               yyyymmddhh
#                                               yyyy_mm_dd_hhmm (lfmpost.pl input format)
#                                               ascii_time      (mm/dd/yyyy hh:mm)
#
# -c                   cycle time to use for rounding purposes (seconds)
# 
# -D                   $LAPS_DATA_ROOT (optional for accessing cycle time)
               
use strict;
use English;
use vars qw($opt_d $opt_c $opt_a $opt_r $opt_m $opt_M $opt_K $opt_e $opt_q $opt_Q $opt_n $opt_w 
            $opt_s $opt_l $opt_p $opt_v $opt_A $opt_f $opt_F $opt_T $opt_V $opt_W $opt_D);
use Getopt::Std;

umask 002;
getopts('d:c:a:rm:e:q:Q:KV:M:n:A:f:F:wslvp:TWD:');

my $initial_time = time();

my $LAPSROOT="@prefix@";

my $LAPS_DATA_ROOT;

if(defined $opt_D){
    $LAPS_DATA_ROOT = $opt_D;
}
require "$LAPSROOT/etc/laps_tools.pm";

#
# Get the cycle time from the namelist if possible, and this is superceded by $opt_c

my $cycle_time = 3600; # default

if(-e "$LAPS_DATA_ROOT/static/nest7grid.parms"){
    my @cycle_time=&laps_tools::get_nl_value("nest7grid.parms","laps_cycle_time","$LAPS_DATA_ROOT");
    $cycle_time[0]=~/^(\d+),/;
    $cycle_time = $cycle_time[0];
}

$cycle_time = $opt_c if($opt_c>0);

my $cycle_time_min = int($cycle_time/60);
$cycle_time_min="0".$cycle_time_min if(length($cycle_time_min)<2);

my $cycle_time_hr  = int($cycle_time/3600);
$cycle_time_hr="0".$cycle_time_hr if(length($cycle_time_hr)<2);

my $delay_time = 0;
$delay_time = $opt_d if(defined $opt_d);
$delay_time = &laps_tools::round($delay_time * 60.) / 60.; # Round to the nearest sixtieth of an hour (minute)
#print "delay_time = $delay_time\n";

my $extend_time=0;
if(defined $opt_e){ # allow extend time to be either positive or negative
    $extend_time = $opt_e;
}

my $archive_time = 0;
$archive_time = $opt_a if($opt_a > 0);

my @MON = qw(JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC);

if(defined $opt_A){
   if(length($opt_A) == 16){ # dd-mmm-yyyy-hhmm (Ascii time format)
      my $mon=0;
      my ($day, $month, $year, $hoursmin)=split /\-/, $opt_A;
      my $hours   = substr($hoursmin,0,2);
      my $minutes = substr($hoursmin,2,2);
      foreach (@MON){
       if($_ eq (uc $month)){last;}
       $mon++;
      }
      $mon=$mon+1;
      $mon="0".$mon if(length($mon)<2);

      $archive_time = &laps_tools::date_to_i4time($year,$mon,$day,$hours,$minutes,"00");

   }elsif(length($opt_A) == 10){ # yyyymmddhh (model run time)
      my $year = substr($opt_A,0,4); 
      my $mon = substr($opt_A,4,2);
      my $day = substr($opt_A,6,2);
      my $hours = substr($opt_A,8,2);
      $archive_time = &laps_tools::date_to_i4time($year,$mon,$day,$hours,"00","00");
#     my $doy = &laps_tools::get_julian_day($day,$month,$year);
#     $archive_time = &laps_tools::a9time_to_i4time($a9time);

   }elsif(length($opt_A) == 9){ # yydddhhmm (a9time format)
      my $a9time = $opt_A;
      $archive_time = &laps_tools::a9time_to_i4time($a9time);

   }else{
      print "USAGE: use -A to input time with the following format\n";
      print "dd-mmm-yyyy-hhmm. Eg., 28-Aug-2002-1200 \n";
      exit;
   }
#  $archive_time = &seconds_since_1970($opt_A,$LAPSROOT,$LAPS_DATA_ROOT);
}

#
#  - The second argument is the time delay in hours to 
#  set the systime.dat file, if you're data arrives more than 1 hour 
#  behind it's valid time set this variable to delay the laps cycle.
#
#  - The '1' (last input) tells sub systime to write ctime.dat and systime.dat; otherwise, not. 
#
#  - If archive time is defined and set to i4time70, then yydddhhmm corresponds exactly to archive_time
#

# Try new version of 'systime' that handles when $cycle_time exceeds 1 hour (call it 'sys_time')

my $yydddhhmm=&laps_tools::sys_time($LAPS_DATA_ROOT,$delay_time,$cycle_time,$archive_time);

#print "opt_f is $opt_f\n";

if($opt_f eq "mm"){
   my $ddd = substr($yydddhhmm,2,3);
   my $yy  = substr($yydddhhmm,0,2);
   my @mmmdd=&laps_tools::JJJ2MMDD($ddd,$yy);
   my $mm = @mmmdd[0];
   $mm="0".$mm if(length($mm)<2);
   print "$mm\n";

}elsif($opt_f eq "yyyymmdd_hhmm"){
   my $yy  = substr($yydddhhmm,0,2);
   my $yyyy;
   if($yy < 60){
       $yyyy = "20".$yy
   }else{
       $yyyy = "19".$yy
   }

   my $ddd = substr($yydddhhmm,2,3);
   my @mmmdd=&laps_tools::JJJ2MMDD($ddd,$yy);
   my $mm = @mmmdd[0];
   $mm="0".$mm if(length($mm)<2);

   my $dd = @mmmdd[1];
   $dd="0".$dd if(length($dd)<2);

   my $hhmm = substr($yydddhhmm,5,4);

   print "$yyyy$mm$dd"."_"."$hhmm\n";

}elsif($opt_f eq "yyyymmddhhmm"){
   my $yy  = substr($yydddhhmm,0,2);
   my $yyyy;
   if($yy < 60){
       $yyyy = "20".$yy
   }else{
       $yyyy = "19".$yy
   }

   my $ddd = substr($yydddhhmm,2,3);
   my @mmmdd=&laps_tools::JJJ2MMDD($ddd,$yy);
   my $mm = @mmmdd[0];
   $mm="0".$mm if(length($mm)<2);

   my $dd = @mmmdd[1];
   $dd="0".$dd if(length($dd)<2);

   my $hhmm = substr($yydddhhmm,5,4);

   print "$yyyy$mm$dd$hhmm\n";

}elsif($opt_f eq "yyyy_mm_dd_hhmm"){
   my $yy  = substr($yydddhhmm,0,2);
   my $yyyy;
   if($yy < 60){
       $yyyy = "20".$yy
   }else{
       $yyyy = "19".$yy
   }

   my $ddd = substr($yydddhhmm,2,3);
   my @mmmdd=&laps_tools::JJJ2MMDD($ddd,$yy);
   my $mm = @mmmdd[0];
   $mm="0".$mm if(length($mm)<2);

   my $dd = @mmmdd[1];
   $dd="0".$dd if(length($dd)<2);

   my $hhmm = substr($yydddhhmm,5,4);

   print "$yyyy"."-"."$mm"."-"."$dd"."-"."$hhmm\n";

}elsif($opt_f eq "yyyymmddhh"){
   my $yy  = substr($yydddhhmm,0,2);
   my $yyyy;
   if($yy < 60){
       $yyyy = "20".$yy
   }else{
       $yyyy = "19".$yy
   }

   my $ddd = substr($yydddhhmm,2,3);
   my @mmmdd=&laps_tools::JJJ2MMDD($ddd,$yy);
   my $mm = @mmmdd[0];
   $mm="0".$mm if(length($mm)<2);

   my $dd = @mmmdd[1];
   $dd="0".$dd if(length($dd)<2);

   my $hh = substr($yydddhhmm,5,2);

   print "$yyyy$mm$dd$hh\n";

}elsif($opt_f eq "ascii_time"){
   my @i4time = &laps_tools::a9time_to_i4time($yydddhhmm);
   my ($yr,$mo,$dy,$hr,$mn,$sc) = &laps_tools::i4time_to_date($i4time[0]-315619200);
#  print "ascii time selected\n";
#  print "$yr,$mo,$dy,$hr,$mn,$sc\n";
   $hr="0".$hr if(length($hr)<2);
   $mn="0".$mn if(length($mn)<2);
   print "$mo/$dy/$yr $hr:$mn\n";
#  print "$yydddhhmm\n";

}else{
   print "$yydddhhmm\n";

}


