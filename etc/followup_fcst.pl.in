#!@PERL@

# Script to generate lapsplot gifs for forecast domain

use lib "@prefix@/etc"; # Set this to your path for 'laps_tools.pm'
require "laps_tools.pm";                 # supplied in $LAPSINSTALLROOT/etc

require 5;
use strict;

# Setup command line options:
#    -m model (e.g. wrf,arw,ensemble)
#    -a model configuration (e.g. schultz,spaghetti) [optional]
#    -d domain (e.g. dwr)
#    -r laps dataroot
#    -f forecast output interval (hours) [optional]
#    -c cycle frequency (hours) [optional]
#    -l forecast length (hours) [optional]
#    -t purge time (hours) [optional]
#    -o offset time (seconds) [optional]
#    -w timeout with waiting for model files (hours) [optional]                 
#    -s fsf only [optional]                 

use vars qw($opt_a $opt_d $opt_r $opt_f $opt_c $opt_l $opt_m $opt_t $opt_o $opt_s $opt_w);
use Getopt::Std;

getopts('a:d:r:f:c:l:m:t:o:w:s');

print "Running followup_fcst.pl...\n";
system("uname -ns");
print "user defined paths\n";
print "model: $opt_m\n";
print "model configuration: $opt_a\n";
my $domain = $opt_d;
my $model;                       
if (defined $opt_a) {
    $model = "$opt_m-$opt_a";
}else{
    $model = "$opt_m";
}
$ENV{LAPSINSTALLROOT}="@prefix@";
my $dataroot = $opt_r;

my @windowres;
my $window;
my $resolution;

# Obtain window parameters
@windowres=&laps_tools::get_fcst_img_res($dataroot);
$window=@windowres[0];
$resolution=@windowres[1];              

my $followup = "@prefix@/etc/www/followup_fcst.sh $domain $model $dataroot $window $resolution";
#my $followup_fire =  "/usr/nfs/common/lapb/www/followup_fcst_fire.sh $domain $model $dataroot $window $resolution";
#my $followup_ua =  "/usr/nfs/common/lapb/www/followup_fcst_ua.sh $domain $model $dataroot $window $resolution";
my $followup_xsect =  "@prefix@/etc/www/followup_fcst_xsect.sh $domain $model $dataroot";
my $followup_spaghetti = "@prefix@/etc/www/followup_ensemble.sh $domain ensemble $dataroot $window $resolution @prefix@";

my $w3recent;
my $w3archive;

my $purge_time = 36;
$purge_time = $opt_t if(defined $opt_t);

my $offset_time = 0;
$offset_time = $opt_o if(defined $opt_o);

my $purger;                                                                          
if (-d "/w3/lapb") {
    $purger = "@PERL@ @prefix@/etc/purge_w3_fcst2d.pl -t $purge_time $domain $model\n";
    $w3recent  = "/w3/lapb/domains/$domain/fcst2d/$model/recent";
    $w3archive = "/w3/lapb/domains/$domain/fcst2d/$model/archive";
    symlink "$dataroot", "/w3/lapb/domains/private_web_data";
}else{
    $purger = "@PERL@ @prefix@/etc/purge_w3_fcst2d.pl -t $purge_time -d $dataroot $domain $model\n";
    $w3recent  = "$dataroot/lapsprd/www/fcst2d/$model/recent";
    $w3archive = "$dataroot/lapsprd/www/fcst2d/$model/archive";
}
system("mkdir -p /w3/lapb/domains/$domain/fcst2d/$model/recent");
system("mkdir -p /w3/lapb/domains/$domain/fcst2d/$model/archive");

my @cycle_time=&laps_tools::get_nl_value("nest7grid.parms","model_cycle_time",$dataroot);
my $cycle_time = $cycle_time[0]; # seconds

my @model_fcst_intvl=&laps_tools::get_nl_value("nest7grid.parms","model_fcst_intvl",$dataroot);
my $model_fcst_intvl = $model_fcst_intvl[0]; # seconds

my @model_fcst_len=&laps_tools::get_nl_value("nest7grid.parms","model_fcst_len",$dataroot);
my $model_fcst_len = $model_fcst_len[0]; # minutes

my $cycle_freq; # Cycle frequency in hours
my $timeout;    # Seconds to wait before giving up after starting
if(defined $opt_c){
    $cycle_freq = $opt_c;              
    $timeout = $opt_c*3600;            
}else{
    $cycle_freq = $cycle_time / 3600.; 
    $timeout = $cycle_time;            
}
if(defined $opt_w){
    $timeout = $opt_w*3600;            
}

my ($output_inc); # Forecast output interval (hours)
if(defined $opt_f){
    $output_inc = $opt_f;                     
}else{
    $output_inc = $model_fcst_intvl / 3600.;  
}

my $fcst_len; # Forecast length (hours)
if(defined $opt_l){
    $fcst_len = $opt_l; 
}else{
    $fcst_len = $model_fcst_len / 60.; 
}

my $init_base_hr = 0;        # Earliest cycle each day in GMT hour

my $fsf_subdir = "lapsprd/fsf/$model";
my $fua_subdir = "lapsprd/fua/$model";

my $sleep_time_fsf = 15; # Number of seconds to wait for fsf file to fill up       
my $sleep_time     = 60; # Number of seconds to sleep between attempts to process

# END OF USER DEFINED PARAMS

# Call purger
print "call purger\n";
print "$purger\n";
system("$purger");

print "setup fsf/fua pathnames\n";
my $local_fsf = "$dataroot/$fsf_subdir";
my $local_fua = "$dataroot/$fua_subdir";

# Set up cycle to process based on system time (UTC)

print "setup time parameters\n";
#beka my $systime_now = time-3600;
my $systime_now = time - $offset_time;
my $cyc_freq_sec = $cycle_freq * 3600;
my $init_base_sec = $init_base_hr * 3600;
my $remainder = ($systime_now - $init_base_sec) % $cyc_freq_sec;
my $cycle_sec = $systime_now - $remainder;

# Unique to NMM downscale of GFS 60-84.
#$cycle_sec = $cycle_sec + 60*3600;

# Convert the cycle time in seconds to normal parameters

my @monthtxt = qw(JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC);
my ($cycsec,$cycmin,$cychour,$cycmday,$cycmon,$cycyear,$cycwday,$cycyday,
    $cycisdt) = gmtime($cycle_sec);

print "convert time parameters\n";
my $cycyear4 = $cycyear + 1900;
$cycyear = $cycyear - 100;
$cycyear = "0".$cycyear while(length($cycyear)< 2);
$cycyday++;
$cycyday = "0".$cycyday while(length($cycyday)<3);
$cychour = "0".$cychour while(length($cychour)<2);
$cycmin = "0".$cycmin while(length($cycmin)<2);
my $cycmontxt = $monthtxt[$cycmon];
$cycmon++;
$cycmon="0".$cycmon while (length($cycmon)<2);
$cycmday = "0".$cycmday while(length($cycmday)<2);
my $www_time = $cycmday."-".$cycmontxt."-".$cycyear4." ".$cychour.$cycmin;
my $cycle = $cycyear.$cycyday.$cychour."00";

print "Cycle to get: $cycle\n";
print "laps_fsf: $local_fsf\n";
print "laps_fua: $local_fsf\n";

# Create the list of file times we need to get

my $num_files = int(($fcst_len/$output_inc) + 0.5)+1;
print "output_inc: $output_inc\n";
print "fcst_len: $fcst_len\n";
print "num_files: $num_files\n";

my $fcsttime = 0;
my ($fcsthr,$fcstmn);
my @times;
while ($fcsttime <= $fcst_len) {
    $fcsthr=int($fcsttime);
    $fcstmn=($fcsttime-$fcsthr) * 60;
  $fcsthr = "0".$fcsthr while (length($fcsthr)<2);
  $fcstmn = "0".$fcstmn while (length($fcstmn)<2);
  push @times, $cycle.$fcsthr.$fcstmn;
  $fcsttime = $fcsttime + $output_inc;
}

print "times: @times\n";

my @times_new;
my @fsffiles_new;
# Time to start the loop to get all of the files
my $timeaccum = 0; 
my $time_start = time;
my $elapsed = 0;
my $times_rem = $num_files;
my $time_now;
my $arrpos;
my ($remfile, $result);
my $www_flag = 0;
my $t; 

my $fsfsize_max = 0; 
my $fsfsize_max_last; 

while (($timeaccum < $timeout) and ($elapsed < $timeout) and ($times_rem > 0)){
  $arrpos = 0;
  @times_new = @times; 
  print "updated times: @times\n";

  foreach (@times) {
    $elapsed = time - $time_start;
    if($elapsed > $timeout){
      print "elapsed time $elapsed exceeds timeout $timeout - exiting...";
      exit;
    }
    if ((-e "$local_fsf/$_.fsf" and (-e "$local_fua/$_.fua" || defined $opt_s) ) || $opt_a eq "spaghetti"){
      my $fsfsize; 
      my $fsfsize_last; 
      my $waitsize = 1;

      $fsfsize_last = 0;                           
      $fsfsize = -s "$local_fsf/$_.fsf";
      print "fsf size = $fsfsize (last is $fsfsize_last)\n";

      $fsfsize_max_last = $fsfsize_max;
      print "fsfsize_max_last = $fsfsize_max_last\n";

#     Determine whether to wait
      while ( ($fsfsize > $fsfsize_last || $fsfsize < $fsfsize_max || $fsfsize == 0 || $fsfsize_max_last == 0) && $waitsize <= 15) {
        if($fsfsize > $fsfsize_max){
          $fsfsize_max = $fsfsize;
        }
        $fsfsize_last = $fsfsize;
        sleep $sleep_time_fsf;
        $fsfsize = -s "$local_fsf/$_.fsf";
        print "fsf size = $fsfsize (last is $fsfsize_last)\n";
        $waitsize++;
      }

      $timeaccum = $timeaccum + $sleep_time_fsf;
      $t=gmtime(); 
      print "\nReady to process $_ ... $t \n" ;
      if ($opt_a eq "spaghetti") {
          my $command = "$followup_spaghetti $_";
          print "running spaghetti command: $command";
          $result=system("$command");
      } else {
          my $command;
          $command = "$followup $_ @prefix@";
          print "running followup hsect command: $command";
          $result=system("$command");

#         $result=system("$followup_fire $_");
#         $result=system("$followup_ua $_");

#         $result=system("$followup_xsect $_ @prefix@");
          $command = "$followup_xsect $_ @prefix@";
          print "running followup xsect command: $command";
          $result=system("$command");

          system("rm -f $local_fsf/$_.fsf.done");
#         system("rm -f $local_fua/$_.fua.done"); 
          if (! $www_flag){
            open(ST, ">$w3recent/systime.dat");
            print ST "$www_time\n";
            close (ST);
            $www_flag =1;
          }
      }
      print "done.\n";
      splice @times_new, $arrpos, 1;
#     $timeaccum = 0;
    }else{
      print "Not ready (both fua and fsf). $local_fsf/$_.fsf\n";
      $arrpos++;
    }
  }
  @times = @times_new;
  $times_rem = @times;

  $t=gmtime(); 

  if ($times_rem > 0){
    print "Sleeping for $sleep_time\n";
    sleep $sleep_time;
    $timeaccum = $timeaccum + $sleep_time;
    $elapsed = time - $time_start;
    print $t." Total wait/elapsed/timeout times since beginning of script: $timeaccum $elapsed $timeout\n";  
  }else{
    system("touch $w3recent/../finish.txt");
    print "All fua/fsf files processed\n";
  }
}
exit;  
