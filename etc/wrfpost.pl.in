#!@PERL@
umask 000;
#dis   
#dis    Open Source License/Disclaimer, Forecast Systems Laboratory
#dis    NOAA/OAR/FSL, 325 Broadway Boulder, CO 80305
#dis    
#dis    This software is distributed under the Open Source Definition,
#dis    which may be found at http://www.opensource.org/osd.html.
#dis    
#dis    In particular, redistribution and use in source and binary forms,
#dis    with or without modification, are permitted provided that the
#dis    following conditions are met:
#dis    
#dis    - Redistributions of source code must retain this notice, this
#dis    list of conditions and the following disclaimer.
#dis    
#dis    - Redistributions in binary form must provide access to this
#dis    notice, this list of conditions and the following disclaimer, and
#dis    the underlying source code.
#dis    
#dis    - All modifications to this software must be clearly documented,
#dis    and are solely the responsibility of the agent making the
#dis    modifications.
#dis    
#dis    - If significant modifications or enhancements are made to this
#dis    software, the FSL Software Policy Manager
#dis    (softwaremgr@fsl.noaa.gov) should be notified.
#dis    
#dis    THIS SOFTWARE AND ITS DOCUMENTATION ARE IN THE PUBLIC DOMAIN
#dis    AND ARE FURNISHED "AS IS."  THE AUTHORS, THE UNITED STATES
#dis    GOVERNMENT, ITS INSTRUMENTALITIES, OFFICERS, EMPLOYEES, AND
#dis    AGENTS MAKE NO WARRANTY, EXPRESS OR IMPLIED, AS TO THE USEFULNESS
#dis    OF THE SOFTWARE AND DOCUMENTATION FOR ANY PURPOSE.  THEY ASSUME
#dis    NO RESPONSIBILITY (1) FOR THE USE OF THE SOFTWARE AND
#dis    DOCUMENTATION; OR (2) TO PROVIDE TECHNICAL SUPPORT TO USERS.
#dis   
#dis 

# Script Name:  wrfpost.pl
#
# Purpose: Driver script to run the LAPS WRF Post-Processor
#

require 5;
use strict;

# Ensure the ncgen program is in environment path
$ENV{PATH}="@NETCDF@/bin:$ENV{PATH}";

my $runtime = `date -u +%y%j%H%M`; chomp $runtime;
use vars qw($opt_d $opt_h $opt_i 
            $opt_l $opt_v $opt_w );
use Getopt::Std;   
print "Routine: wrfpost.pl\n";
my $mydir = `pwd`; chomp $mydir; 
getopts('d:hi:l:v:w:');
if ($opt_h){    
  print "Usage:  wrfpost.pl [options]

          Valid Options:
          ===============================================================

          -d {MOAD_DATAROOT}
             Overrides MOAD_DATAROOT environment variable

          -h
             Prints out this help message

          -i {Installation root}
             Overrides the INSTALLROOT environment variable

          -l {laps_data_root}

          -v Version
             WRF model version begin processed (1 or 2)
             If not set, 2 is assumed.

          -w {Domain number to process (default = 1)
            nesting.nl\n";
  exit;
}
# Get user specified installroot and dataroot.  If they are not
# present, then use environment variables.

my ( $installroot, $wrfdataroot, $lapsdataroot);
if (! defined $opt_i){
  if (! $ENV{LAPSINSTALLROOT}){
    print "No LAPSINSTALLROOT environment variable set! \n";
    print " ... will determine from relative path.\n";
    my $curdir = `pwd`; chomp $curdir;
    my $script = $0;
    if ($script =~ /^(\S{1,})\/wrfpost.pl$/){
      chdir "$1/..";
    }else{
      chdir "..";
    }
    $installroot = `pwd`; chomp $installroot;
    chdir "$curdir";
    if (! -e "$installroot/bin/lfmpost.exe") {
      die "Cannot determine installroot\n";
    }else{
      $ENV{INSTALLROOT} = $installroot;
    }
  }else{
    $installroot = $ENV{LAPSINSTALLROOT};
  }
}else{
  $installroot = $opt_i;
  $ENV{LAPSINSTALLROOT}=$installroot;
}                                                                         
if (! defined $opt_d){
  if (! $ENV{MOAD_DATAROOT}){
    die "No MOAD_DATAROOT environment variable set! \n";
  }else{
    $wrfdataroot = $ENV{MOAD_DATAROOT};
  }
}else{
  $wrfdataroot = $opt_d;
  $ENV{MOAD_DATAROOT} = $wrfdataroot;
}  

my ($domain_num);
if ($opt_w){$domain_num = $opt_w}else{$domain_num = 1}
my $domnum2 = $domain_num;
$domnum2 = "0".$domnum2 while(length($domnum2)<2);

# Check for some mandatory files and die if not found.  
my $lfmpostnl = "$wrfdataroot/static/lfmpost.nl";
if (! -f $lfmpostnl){ die "$lfmpostnl not found! \n";}
my $workdir = "$wrfdataroot/wrfprd";
if (! -d $workdir){ die "$workdir not found! \n";}
my $domdir = "$workdir/d".$domnum2;
if (! -d "$domdir"){
  print "Creating $domdir\n";
  mkdir "$domdir";
}
my @subdirs = qw ( awips fsf fua grib points v5d );
foreach (@subdirs) {
  if (! -d "$domdir/$_"){
    print "Creating $domdir/$_\n";
    mkdir "$domdir/$_";
  }
}
my $logfile = "$wrfdataroot/log/lfmpost_d$domain_num.$runtime.log";
my $lfmpostlog = "$logfile.exe";
chdir $workdir;

if ($opt_l){
  $lapsdataroot=$opt_l;  
  $ENV{LAPS_DATA_ROOT}=$lapsdataroot;
}else{
  if ($ENV{LAPS_DATA_ROOT}){
    $lapsdataroot = $ENV{LAPS_DATA_ROOT};
  }else{
    print "No LAPS_DATA_ROOT set.\n";
    print "If LAPS output is requested, LFMPOST will die!\n";
  }
}
print "LAPS_DATA_ROOT=$lapsdataroot\n";

# Set WRF version
my ($wrfversion, $exearg1);
if ($opt_v) {
  $wrfversion = $opt_v;
  if (($wrfversion != 1) and ($wrfversion != 2)){  
    die "Specified incorrect WRF version.\n";
  }
  if ($wrfversion == 1){
    print "Assuming WRFV1 output.\n";
    $exearg1 = "wrf";
  }else{
    print "Assuming WRFV2 output.\n";
    $exearg1 = "wrf2";
  }
}else{
  print "Assuming WRFV2 output.\n";
  $wrfversion = 2;
  $exearg1 = "wrf2";
}

# For version 2 output, we need to build the wrftimes
# namelist file from MOAD_DATAROOT/wrfprd/namelist.input
if ($wrfversion == 2){
  print "Building $wrfdataroot/wrfprd/wrftimes.nl file\n";
  if (! -f "$wrfdataroot/wrfprd/namelist.input"){
    die "No valid namelist.input found.\n";
  }
  open(WNL,"$wrfdataroot/wrfprd/namelist.input");
  my @lines = <WNL> ;
  close(WNL);
  open (WTNL, ">$wrfdataroot/wrfprd/wrftimes.nl");
  print WTNL "\&wrftimes\n";
  foreach(@lines){
    if ( (/start_year/i) or (/end_year/i) or
         (/start_month/i) or (/end_month/i) or
         (/start_day/i) or (/end_day/i) or
         (/start_hour/i) or (/end_hour/i) or
         (/start_minute/i) or (/end_minute/i) or
         (/start_second/i) or (/end_second/i) or
         (/history_interval/i) or (/frames_per_outfile/i)){

      print WTNL "$_";
    } 
  }
  print WTNL "/\n";
  close (WTNL);
}
    
my $command;
$command = "$installroot/bin/lfmpost.exe $exearg1 $domain_num >> $lfmpostlog";

# Set up the log file
open (LOG, ">$logfile");

my ($startdate, $enddate);
$startdate = `date -u +%H%M"Z"`; chomp $startdate;
print LOG "----------------------------------------\n";
print LOG "Job submitted at $startdate\n";
system("$command >> $lfmpostlog");
$enddate = `date -u +%H%M"Z"`; chomp $enddate;
print LOG "Job ended at $enddate\n";
print LOG "Standard output from lfmpost follows:\n\n";
close(LOG);
system ("cat $lfmpostlog >> $logfile");
system ("rm $lfmpostlog");
chdir "$mydir";
exit;
