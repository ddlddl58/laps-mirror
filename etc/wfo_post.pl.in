#!@PERL@
# Copyright (C) 1998  James P. Edwards
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#
# Command line args
#
# -w        Create Bigfile if we're running externally to AWIPS
#

use vars qw($opt_w);
use Getopt::Std;
getopts('w');

$LAPSROOT=shift || die "LAPS root directory required\n";
require "$LAPSROOT/etc/fxa.pm";
require "$LAPSROOT/etc/run_sys.pm";

require "$LAPSROOT/etc/laps_tools.pm";
my @c8_project = &laps_tools::get_nl_value("nest7grid.parms","c8_project",$LAPS_DATA_ROOT);
my $c8_project = uc @c8_project[0];

my $dsunavailable;
if(!$opt_w){
    $fxa_sys =  &Get_env'fxa; #'
}else{
  if ($c8_project eq "RSA") {
    $dsunavailable = system("rsh -l fxa ds \'hostname\'");
  }
}

$ENV{LAPS_DATA_ROOT} = shift ;
$ENV{LAPS_DATA_ROOT} = "$LAPSROOT/data" if ! $ENV{LAPS_DATA_ROOT};
$LAPS_DATA_ROOT = $ENV{LAPS_DATA_ROOT};

# Import names of LAPS bigfile depositories.
if(!$opt_w){
    $FXA_DATA = $ENV{"FXA_DATA"};
    $FXA_DATA_BACKUP = $ENV{"FXA_DATA_BACKUP"};
}
$ENV{PATH}.=":@NETCDF@/bin";

# For local use.
if(!$opt_w){
    $XFR_HOME="$LAPSROOT/bin";
    $FCSTPRD="$LAPS_DATA_ROOT/lapsprd";
    $BIGFILE_PATH="Grid/FSL/netCDF/LAPS_Grid/LAPS";
    $WFO_FCSTPRD="$FXA_DATA/$BIGFILE_PATH";
    $WFO_FCSTPRD_BACKUP="$FXA_DATA_BACKUP/$BIGFILE_PATH";
    $TRANS_TBL="$LAPS_DATA_ROOT/static/public_laps2wfo.tbl";
    $LAPSTIME="$LAPS_DATA_ROOT/time/systime.dat";
    $CDL_PATH="$FXA_DATA/Grid/FSL/CDL";

}else{
    $XFR_HOME="$LAPSROOT/bin";
    $FCSTPRD="$LAPS_DATA_ROOT/lapsprd";
    $BIGFILE_PATH="bigfile";
    $WFO_FCSTPRD="$LAPS_DATA_ROOT/lapsprd/$BIGFILE_PATH";
    $WFO_FCSTPRD_BACKUP="$LAPS_DATA_ROOT/lapsprd/$BIGFILE_PATH";
    $TRANS_TBL="$LAPS_DATA_ROOT/static/public_laps2wfo.tbl";
    $LAPSTIME="$LAPS_DATA_ROOT/time/systime.dat";
    $CDL_PATH="$LAPS_DATA_ROOT/cdl";

    $sys = "mkdir -p $LAPS_DATA_ROOT/lapsprd/bigfile";
    run_sys::run_sys("$sys");

}


#Export environment variables for use in xfer_laps.
$ENV{"XFR_HOME"} =   $XFR_HOME;
$ENV{"FCSTPRD"} =    $FCSTPRD;
$ENV{"WFO_FCSTPRD"} =$WFO_FCSTPRD;
$ENV{"TRANS_TBL"} =  $TRANS_TBL;
$ENV{"LAPSTIME"} =   $LAPSTIME;
$ENV{"CDL_PATH"} =   $CDL_PATH;
      

open(LAPSTIME,$LAPSTIME) or die "Can't open $LAPSTIME";
($filetime,$dummy,$utc_hour,$utc_min) = <LAPSTIME>;
close(LAPSTIME);
chomp($filetime); chomp($utc_hour); chomp($utc_min);





$filetime =~ s/ *//;  #fortran write may have added leading spaces
$filetime= $filetime - 315619200;

run_sys::run_sys( "$LAPSROOT/bin/xfer_laps.exe");

# if(!$opt_w){
$mon++;
($ss,$mm,$hh,$dd,$mon,$yy) = gmtime($filetime);
$mon++;
$yy += 1900;
$filename = sprintf "%4.4d%2.2d%2.2d_%2.2d%2.2d", ($yy,$mon,$dd,$hh,$mm);
if (!$opt_w){
    use File::Copy 'cp';
    cp("$WFO_FCSTPRD/$filename", "$WFO_FCSTPRD_BACKUP/$filename") if(-d $FXA_DATA_BACKUP);
    $sys = "/bin/csh -c \'$ENV{FXA_HOME}/bin/GridNotify Laps $filetime 0\'";
    print "running $sys\n";
    run_sys::run_sys("$sys");
}else{
    # LW check for hwt transfers
    my $HWT_OUT;
    if (substr($LAPS_DATA_ROOT,23,6) eq "faa2km") {
      $HWT_OUT = "/data/fab/projects/hwt/stmas/faa2km";
      cp("$WFO_FCSTPRD/$filename", "$HWT_OUT/$filename");
      print "Copied $WFO_FCSTPRD/$filename to $HWT_OUT"
    }
    if (! $dsunavailable){
      my $ld;
      if ($LAPS_DATA_ROOT =~ /LAPS(\d\d)$/){
        print "RSA type notification\n";
        $ld = "laps".$1;
      }else{
        $ld = "Laps";
      }
      if ($c8_project eq "RSA") {
        $sys="rsh -l fxa ds \'/awips/fxa/bin/GridNotify $ld $filetime 0\'";
        print "running $sys\n";
        run_sys::run_sys("$sys >/dev/null 2>&1 &");
      }
    }
}
