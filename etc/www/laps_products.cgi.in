#!@PERL@ -w

### LAPS Real Time Forecast Products
### Filename: laps_products.cgi
### Author: Jared Seehafer
### Last Revision: 06/15/2006
### Dependencies: LAPS_Web_Root/includes/fabheader.inc
###               LAPS_Web_Root/includes/fabfooter.inc
###               LAPS_Web_Root/forecasts/timecalc.pl
###               LAPS_Web_Root/forecasts/cfg/laps_products.cfg  
###               LAPS_Web_Root/forecasts/interface_images/

### This Perl script creates the web front end for previously-generated
### LAPS forecast products that are currently located in /w3/lapb/domains.
### It uses data provided in its configuration file (cfg/laps_products.cfg)
### to parse directories and find all relevant images, sorting them by
### domain, model, variable, date and so on.
### It then creates an interface for viewing images, with looping and 
### dprog/dt functionality.

### RE: CHANGING DIRECTORY STRUCTURE
### The only assumptions this script makes is that pre-generated images
### will be located under a subdirectory "domains" of the directory root
### The variable for the directory root can be changed below.
### Locations of the models/domains can be changed in the configuration file

#directives

use strict;
use CGI qw(:standard);

require "timecalc.pl"; # needed to calculate the "real" time from our time strings

#globals

my (@model_dates, @model_params, %all_domains, %model_hash);

# change these when we move to new directory structure

my $webroot = "http://laps.noaa.gov/";
my $directoryroot = "/w3/lapb/";

#--------------------------------------------------------------------------

# this subroutine accesses the configuration file and fills %all_domains with data
# on all domains in the config file

sub access_config_file
{
        my $success = open CONFIG, "cfg/laps_products.cfg" # change this if config file is moved
        or die("open config file failed: $!");
        my $i = 1; #index
        my $cur_dom;
        my $cur_mod;
        while (<CONFIG>)
        {

                chomp;
                if (/^#/) { next; } # skip comments in the config file
		if ($_ eq "") { next; } # skip empty lines
                
                if ($i == 8 && $_ ne "--") { $i = 3; } # if more models, keep going on this domain
                elsif ($i == 8 && $_ eq "--") {$i = 1; next;} # else, go to the next one

                if ($i == 1)
                {
                    $all_domains{$_} = {}; # new hash
                    $all_domains{$_}{"directory"} = $_;
                    $cur_dom = $_;
                    $i++;
                }
                elsif ($i == 2)
                {
                    $all_domains{$cur_dom}{"name"} = $_;
                    $all_domains{$cur_dom}{"models"} = [];
                    $i++;
                }
                elsif ($i == 3)
                {
                    $all_domains{$cur_dom}{"models"}[scalar(@{$all_domains{$cur_dom}{"models"}})] = $_;
                    $all_domains{$cur_dom}{$_} = {};
                    $cur_mod = $_;
                    $i++;
                }
                elsif ($i == 4)
                {
                    $all_domains{$cur_dom}{$cur_mod}{"name"} = $_;
                    $i++;
                }
                elsif ($i == 5)
                {
		    s/ //g;
                    $all_domains{$cur_dom}{$cur_mod}{"offset"} = substr($_, 0, 2).substr($_, 2, 2).substr($_, 4, 2);
                    $i++;
                }
                elsif ($i == 6)
                {  
                    $all_domains{$cur_dom}{$cur_mod}{"init"} = $_;
                    $i++;
                }
                elsif ($i == 7)
                {
                    $all_domains{$cur_dom}{$cur_mod}{"point_fcst"} = $_;
                    $i++;
                }
                       	
        }
        close CONFIG;
	
}


#---------------------------------------------------------------------------------------------------------

# this subroutine, when called with a model directory, will build the hashes 
# with the appropriate information about the available images, forecast products
# and so on, that are available for that directory.
# This determines "image" files from extensions...it eliminates non-image files
# by their extensions (.txt, .dat, etc).  It only eliminates files and doesn't
# include files.

sub parse_directory($)
{
    my $directory = $_[0]; # tells us which forecast model to work on
    
    chdir $directory or die "cannot chdir to $directory: $!";
    
    @model_dates = glob "[0-9]*"; # model_dates holds the dates/times of the forecast model 
	   
    foreach my $datetime (@model_dates)
    {
		@model_params = [];
		my %temp_hash;	
		chdir "$datetime" or die "cannot chdir to $datetime: $!";
		my @allfiles = glob "*"; # start by getting everything in a directory
		my $k = 0; #index
		foreach my $listing (@allfiles)
		{
		    $_ = $listing;
		    if (/\./)
		    {
				# not a directory - so do nothing - make sure we dont get system.dat, etc
		    }
		    else
		    {
			$model_params[$k] = $listing; # model_params holds all model paramters
			$k++;
		    }
		}
		
		#at this point model_dates has the available dates and model_params has our forecast parameters.      
		#we can start building our hash

		foreach my $param (@model_params)
		{
		    $temp_hash{$param} = []; # create a blank array for each parameter in the hash
		}
		$model_hash{$datetime} = {%temp_hash}; # use this hash as values for our main hash
		
		
	       
		# now, our hash contains arrays for every date and model combination
		# now we start filling those arrays with the appropriate values
		
		foreach my $param (@model_params)
		{
			my $k = 0; #reset our index
			chdir "$param" 
			    or die "cannot chdir to $param: $!";
			my @imgfiles = glob "*.gif"; # needs to be changed if we move to a diff img format
			foreach my $img (@imgfiles)
			{
			    $model_hash{$datetime}{$param}[$k] = $img;
			    $k++;
			}
			chdir "../"; #back out
			
		}
		chdir "../"; #back out
	    
	}
	#now, when you access the hash via the first parameter (date) and second parameter (data) 
	#you should have an array of the available images

	#@{$model_hash{'030550300'}{'CAPE'}}; - syntax you need to access the array

}


#--------------------------------------------------------------------------------------------------------


sub model_selection
{
    print << "EOHTML";

<p class="header">NOAA/GSD/FAB -- LAPS Real Time Forecast Products</p>
<i>This system will allow you to view images generated by NCAR Graphics for a given forecast model, forecast product, and date.</i>
<br /><br />
<b>Please select a model:</b><br /><br />
<table border="2" cellpadding="4" cellspacing="4" bordercolor="#000000">
<tr class="tableinfo" bgcolor="#99cccc">
    <td><div align="center"><strong>Domain</strong></div></td>
    <td><div align="center"><strong>Model </strong></div></td>
    <td><div align="center"><strong>Point Fcst</strong></div></td>
    <td><div align="center"><strong>Initialization</strong></div></td>
    <td><div align="center"><strong>Latest Cycle (UTC)</strong></div></td>
  </tr>
EOHTML
&access_config_file();
my @domain_names = keys (%all_domains);
@domain_names = sort (@domain_names);
my $domain_prev = "  ";
foreach (@domain_names) # parse through each domain
{
    # create variable to contain specific information about that domain
    
    my $domain_directory = $all_domains{$_}{"directory"};
    my $domain_name = $all_domains{$_}{"name"};
    my @domain_models = @{$all_domains{$_}{"models"}};
    
    # print the beginning of the table row for this domain

    if($domain_name ne $domain_prev){
        print '<tr class="tableinfo" bgcolor="#66cccc">';
        print "<td><u><b>$domain_name</b></u></td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>";
    }

    $domain_prev = $domain_name;
    
    foreach (@domain_models)
    {
	my %model_hash = %{$all_domains{$domain_directory}{$_}};
	my $model_name = $model_hash{"name"};
	my $offset = $model_hash{"offset"};
	my $init_raw = $model_hash{"init"};
	my $point_fcst_raw = $model_hash{"point_fcst"};
	my @init = split(/\|/, $init_raw);
	my @point_fcst = split(/\|/, $point_fcst_raw);
	print "<tr class='tableinfo' bgcolor='#ffffff'><td>&nbsp;</td><td><a href='laps_products.cgi?model_selection=$domain_directory/fcst2d/$_'>$model_name</a></td>"; # print each domain
	
	# then the model initialization data (LAPS Analysis, etc)
	if (scalar(@init) == 1)
	{
	    print "<td width=10>$init[0]</td>"; 
	}
	elsif (scalar(@init) > 1)
	{
	    print "<td width=10><a href='$webroot$init[1]'>$init[0]</a></td>";
	}
	
	# whether we have point forecast data available on the web

	if (scalar(@point_fcst) == 1)
	{
	    print "<td width=10>$point_fcst[0]</td>";
	}
	elsif (scalar(@point_fcst) > 1)
	{
	    print "<td width=10><a href='$webroot$point_fcst[1]'>$point_fcst[0]</a></td>";
	}

        my $minage;
        if($domain_name =~ "PSD"){
            $minage = 1.02; 
        }elsif ($domain_name =~ "HWT") {
            $minage = 12.02;
        }else{
            $minage = 6.02;
        }        

        stat("${directoryroot}domains/${domain_directory}/fcst2d/${_}/recent/systime.dat");
        my $systimeage = 24*(-M _);

        stat("${directoryroot}domains/${domain_directory}/fcst2d/${_}/latest.txt");
        my $latestage = 24*(-M _);

        stat("${directoryroot}domains/${domain_directory}/fcst2d/${_}/finish.txt");
        my $finishage = 24*(-M _);
  
        if($systimeage > $minage){ 
	    print '<td width=15><font color="#990000">';          # RED
        }else{                     
            if($latestage > 0.5 && $finishage > $latestage){ 
	        print '<td width=15><font color="#996600">';      # ORANGE
            }else{
	        print '<td width=15><font color="#009900">';      # GREEN
            }
        }

	open FILE, "${directoryroot}domains/${domain_directory}/fcst2d/${_}/recent/systime.dat";

	# and when this model data was generated

	while (<FILE>)
	{
	    chomp;
	    print $_;
	}
	close FILE;
	
	print '</font></a></td></tr>';
    }
}

print "</table>";

}

#-----------------------------------------------------------------------------------------------

sub selection_made 

{

    use lib "@prefix@/etc"; # Set this to your path for 'laps_tools.pm'
    require "laps_tools.pm";                 # supplied in $LAPSINSTALLROOT/etc

    my $model_selection = param('model_selection'); # get our information about which domain to use
#   print "model_selection = $model_selection<br>\n";

#   Read grid dimensions
    my @pieces = split '/', $model_selection;
#   print "pieces = @pieces<br>\n";
    my $piece = $pieces[0];

    my $laps_data_root;
    $laps_data_root = "$directoryroot/domains/$piece/private_data";
#   print "laps_data_root = $laps_data_root<br>\n";

    my ($xdim,$ydim,$domain_nl,$nl_var,@xdim,@ydim);
    $domain_nl = "nest7grid.parms";

    if(-e "$laps_data_root/static/$domain_nl"){
      $nl_var="NX_L";
      @xdim=&laps_tools::get_nl_value($domain_nl,$nl_var,$laps_data_root);
      $nl_var="NY_L";
      @ydim=&laps_tools::get_nl_value($domain_nl,$nl_var,$laps_data_root);
      $xdim = $xdim[0];
      $ydim = $ydim[0];
#     print "xdim,ydim is $xdim,$ydim<br>\n";
    }else{
      print "ERROR: could not find $laps_data_root/static/$domain_nl<br>\n";
    }

    my $aspect_ratio = ($xdim-1.0) / ($ydim-1.0);
#   print "aspect_ratio is $aspect_ratio<br>\n";

    my $model_dir = $directoryroot."domains/".param('model_selection')."/archive";
    my $web_dir = $webroot.substr($model_dir,9);
    my $ysize = 730;
    my $xsize;

    if($aspect_ratio > 1.40){
        $xsize=int($ysize*1200./885.);
#       $xsize = $ysize;
    }elsif($aspect_ratio > 1.192){
        $xsize=int($ysize*1056./885.);
#       $xsize = $ysize;
    }else{
        $xsize = $ysize;
    }

#   if(param('model_selection') =~ "Xsect"){
#       $xsize=int($ysize*1056./885.);
#   }

    my $width_topa = int(($xsize/664.) * 0.9065 * 196.) + 17; 
    my $width_topc = int(($xsize/664.) * 0.9065 * 535.) + 17; 
#   my $width_bota = int(($xsize/664.) * 1.05 * 400.) + 17; 
    my $width_botb = int(($xsize/664.) * 1.15 * 231.) + 17; 
#   my $width_botb = int($xsize - $width_bota) + 0; 
    my $width_bota = int($xsize - $width_botb) - 0; 

#   print "xsize,ysize is $xsize,$ysize<br>\n";

#   print "width_bota,width_botb is $width_bota,$width_botb<br>\n";

    &parse_directory($model_dir); # parse the given directory and build our hash
    print << "EOHTML1";

    <p class="header">NOAA/GSD/FAB -- LAPS Real Time Forecast Products</p>
	<i>Use the image selection tool below to select your desired forecast image.</i><br />
	<i>To select another model, <a href="laps_products.cgi">return to the previous page</a></i>
<br /><br />
<form NAME="imgSelectionForm">
<INPUT TYPE = "hidden" NAME = "dprogdt" VALUE="">
<table cellpadding="0" cellspacing="0" align="center">
<tr><td>
<table cellpadding="0" cellspacing="0" align="center"><tr><td><img name="image_selection" src="interface_images/imgcontrol_topA1.gif" border=0></a></td><td><img src="interface_images/imgcontrol_topB.gif"></td></tr></table></td></tr>
<tr>

<td background="interface_images/imgcontrol_bg.gif" align="center">
<table cellpadding="0" cellspacing="0" border="0">
<tr>
	<td background="interface_images/imgcontrol_bg.gif" align="left"><img src="interface_images/imgcontrol_labelMode.gif" border=0></a></td><td align="right"><img name="help_init" src="interface_images/imgcontrol_bg.gif"></td><td width=10></td>
<td background="interface_images/imgcontrol_bg.gif" align="left"><img name = "initialization_img" src="interface_images/imgcontrol_labelInitialization.gif" border=0><img name = "date_time_img" src="interface_images/imgcontrol_labelDateTime.gif" border=0 style="display:none"></td><td align="right"><img name="help_init" src="interface_images/imgcontrol_bg.gif"></td><td width=10></td>
	<td background="interface_images/imgcontrol_bg.gif" align="left"><img name = "data_img" src="interface_images/imgcontrol_labelData.gif"border=0></a></td><td align="right"><img name="help_data" src="interface_images/imgcontrol_bg.gif"></td><td width=10></td>
	<td background="interface_images/imgcontrol_bg.gif" align="left"><img name = "hour_img" src="interface_images/imgcontrol_labelHour.gif" border=0></a></td><td align="right"><img name="help_hour" src="interface_images/imgcontrol_bg.gif"></td><td width=10></td>
</tr>
<tr>

EOHTML1

print << "EOHTML1A";
<script type="text/javascript">

//<![CDATA[
    var width_image = $xsize;
    var height_image =$ysize;

//]]>
</script>

EOHTML1A

#std HTML form data: for changing modes

print '<td background="interface_images/imgcontrol_bg.gif" align="left" colspan=2>';
    print '<select NAME = "mode" onChange = "chg_mode()">';
    print '<option>Init Time/Fcst Hr</option>';
    print '<option>dprog/dt</option>';
    print '</select></td>';
    print '<td width=10></td>';


print '<td background="interface_images/imgcontrol_bg.gif" align="left" colspan=2>';
    print '<select NAME="init" onChange="populate_hour()">';
    @model_dates = reverse sort (@model_dates);
    foreach my $date(@model_dates)
    {
 	my $num_dates = scalar(@model_dates); # get the number of dates
 	my @fixed_date_array = &timecalc($date); # calculate the fixed UTC and MST time from a time string
	print "<option value=\"$date\">$fixed_date_array[0] UTC/$fixed_date_array[1] MST";
 	print "</option>";	
    }

    print '</select>';

    my @obs_dates;
    my $old_hour;
    my $present = 0;
    
    # calculate dates for dprog/dt tests

    foreach my $date(@model_dates)
    {
	my $year = substr($date, 0, 2);
	my $julian = substr($date, 2, 3);
	my $hour24 = substr($date, 5, 4);
	foreach my $hr (@{$model_hash{$date}{$model_params[0]}})
	{
	    my $new_year = $year;
	    my $new_julian = $julian;
	    $old_hour = substr($hr, 0, 4);
	    my $new_hour = $old_hour + $hour24;
	    if ($new_hour > 2300)
	    {
		$new_hour -= 2400;
		$new_julian++;
	    }
	    while (length($new_hour) < 4) { $new_hour = "0".$new_hour; }
	    if ($new_julian > 365 && $new_year % 4 != 0)
	    {
		$new_julian = "000";
		$new_year++;
	    }
	    my $new_obs = $new_year.$new_julian.$new_hour;
	    foreach (@obs_dates)
	    {
		if ($_ eq $new_obs)
		{
		    $present = 1;
		    last;
		}
	    }
	    if ($present != 1)
	    {
		$obs_dates[scalar(@obs_dates)] = $new_obs;
	    }
	    $present = 0;
	}
    }
    @obs_dates = reverse sort (@obs_dates);
    
    my @matching_fcsts;

    # this JavaScript is the function that controls printing out the dprog/dt data

    print '<SCRIPT LANGUAGE="JavaScript">';
    print 'function populate_date_time(){';
    
    my $i = 0;
    foreach my $obs (@obs_dates)
    {
 	my @fixed_date_array = &timecalc($obs); # calculate the fixed UTC and MST time from a time string
	foreach my $param (@model_params)
	{
	    my @matching_fcsts;
	    foreach my $model_date (@model_dates)
	    {
		my $year = substr($model_date, 0, 2);
		my $julian = substr($model_date, 2, 3);
		my $hour24 = substr($model_date, 5, 4);
		foreach my $hr (@{$model_hash{$model_date}{$param}}) 
		{
		    my $new_year = $year;
		    my $new_julian = $julian;
		    $old_hour = substr($hr, 0, 4);
		    my $new_hour = $old_hour + $hour24;
		    if ($new_hour > 2300)
		    {
			$new_hour -= 2400;
			$new_julian++;
		    }
		    while (length($new_hour) < 4) { $new_hour = "0".$new_hour; }
		    if ($new_julian > 365 && $new_year % 4 != 0)
		    {
			$new_julian = "000";
			$new_year++;
		    }
		    my $new_obs = $new_year.$new_julian.$new_hour;
		    #print "\nNew Obs: $new_obs\nObs: $obs\n";
		    if ($new_obs eq $obs)
		    {
			$matching_fcsts[scalar(@matching_fcsts)] = $model_date."|".$hr;
		    }
		}	
		
	    }
	    
	    print "var urls$i = '|'\n";
		
	    @matching_fcsts = reverse (@matching_fcsts);

	    foreach my $match (@matching_fcsts)
	    {
		my @match_data = split /\|/, $match;
		my $url = $webroot."domains/".$model_selection."/archive/".$match_data[0]."/".$param."/".$match_data[1];
		print "urls$i = urls$i + '$url' + '|';"; 
	    }
	    #print 'alert(document.imgSelectionForm.hour.value);';
	    #print 'alert(document.imgSelectionForm.parameter.value);';
	    print "\nif (document.imgSelectionForm.date_time.value == '$obs' && document.imgSelectionForm.parameter.value == '$param') \n{\n";
	    print "document.imgSelectionForm.dprogdt.value = urls$i; \n loop_images = ".scalar(@matching_fcsts)."; \n}\n";
	    
	    $i++;

	}
	
	
    }
	
    print '}</SCRIPT>';

    print '<select NAME="date_time" onChange = "populate_date_time()" style="display:none">';
    foreach my $date(@obs_dates)
    {
 	my $num_dates = scalar(@model_dates); # get the number of dates
 	my @fixed_date_array = &timecalc($date); # calculate the fixed UTC and MST time from a time string
	print "<option value=\"$date\">$fixed_date_array[0] UTC/$fixed_date_array[1] MST";
 	print "</option>";	
    }
    print '</select>';

    print '</td>';
    print '<td width=10></td>';
    print '<td background="interface_images/imgcontrol_bg.gif" align="left" colspan=2>';
    print '<select NAME="parameter" onChange="populate_global()">';
    foreach my $param(@model_params)
    {
	print "<option>$param";
 	print "</option>";	
    }

    print '</select>';
    print '</td>';
    print '<td width=10></td>';
    print '<SCRIPT LANGUAGE = "JavaScript">';
    print 'function populate_hour() {';
    $i = "1";
    my $imgtext = "";
    foreach my $date (@model_dates)
    {
	foreach my $param (@model_params)
	{
	    $i = "1";
	    print "\nif (document.imgSelectionForm.init.value == '$date' && document.imgSelectionForm.parameter.value == '$param') \n{\n";
	    
	    foreach my $img (@{$model_hash{$date}{$param}})
	    {
                if(length($img) > 8){
                    $imgtext = substr($img, 0, 3);
                }else{
                    $imgtext = substr($img, 0, 2);
                }
#               $imgtext = substr($img, 0, 2);
#               $imgtext = $img;

		print "document.imgSelectionForm.hour.options[$i] = new Option('$imgtext', '$img');\n";
		$i++;
	    }
	    print "loop_images = ".scalar(@{$model_hash{$date}{$param}}).";\n";
	    
	    my $img1 = substr(${$model_hash{$date}{$param}}[0],0,2);
	    my $img2 = substr(${$model_hash{$date}{$param}}[1],0,2);
            my $loop_offset = $img2 - $img1; 
	    print "loop_offset = $loop_offset;\n";
	    print "}";
	}
    }
    print '}</SCRIPT>';
    print '<td background="interface_images/imgcontrol_bg.gif" align="left" colspan=2>';
    print '<select NAME="hour">';
    print '<option value="LOOP" selected>LOOP';
    print '</select>';
    print '</td><td width=10></td>';

	print << "EOHTML2";

</tr>
</table>
</td>
</tr>
<tr><td valign="bottom"><img src="interface_images/imgcontrol_bot.gif"></td></tr>
<tr><td valign="top"><a href="#img_top"><img src='interface_images/imgcontrol_update.gif' onclick='updateMainImage("$web_dir");' border=0>
</a></td></tr>
</table>
</form>

<table cellpadding="0" cellspacing="0" border="0" align="center">
<tr width="$xsize+50" align="right">

<td valign="bottom"><a name="img_top"><img src="interface_images/topBarA.gif" height=42 width=$width_topa border="0"></a></td>
<td valign="bottom"><img src="interface_images/topBarC.gif" height=42 width=$width_topc> </td>
</tr>
        
</table>

<table cellpadding="0" cellspacing="0" border="0" align="center">
<tr>
                        <td><img src="interface_images/leftBar.gif" width=17 height=$ysize+5></td>

                        <td bgcolor="#000000" background="interface_images/notavailable.gif" align="center" valign="middle" width=$xsize height=$ysize><a href="#img_top" title="Click to View Image in New Window" onClick="window.open(document.main_img.src,'_blank','height=675; width=675;');"><img name="main_img" src="interface_images/blank.gif" border=0 width=$xsize height=$ysize></a></td>
                        <td><img src="interface_images/rightBar.gif" width=17 height=$ysize+5></td>
                </tr>
        
</table>


<table cellpadding="0" cellspacing="0" border="0" align="center">
<tr width="$xsize+50">
                        <td><img src="interface_images/botBarA.gif" width=$width_bota height=47></td>

                        <td background="interface_images/botBarB.gif" width=$width_botb valign="top" align="center">
                                <table cellpadding="0" cellspacing="0" width=$width_botb height="28">
                                        <tr><td><a name = "bot_img"><img src="interface_images/botBarB_top.gif" border="0"></a></td></tr>
                                        <tr>
                                        <td height=28 align="top" background="interface_images/botBarB_bot.gif"><a href="#bot_img" title="Loop Controls :: HEAD" onclick="if (loopMode()) loopHead();"><img name="loop_head" src="interface_images/loop_head.gif" border=0></a><a href="#bot_img" title="Loop Controls :: REV" onclick="if (loopMode()) loopRev();"><img name="loop_rev" src="interface_images/loop_rev.gif" border=0></a><a href="#bot_img" title="Loop Controls :: PLAY" onclick="if (loopMode()) loopPlay();"><img name="loop_play" src="interface_images/loop_play.gif" border=0></a><a href="#bot_img" title="Loop Controls :: STOP" onclick="if (loopMode()) loopStop();"><img name="loop_stop" src="interface_images/loop_stop.gif" border=0></a><a href="#bot_img" title="Loop Controls :: FWD" onclick="if (loopMode()) loopFwd();"><img name="loop_fwd" src="interface_images/loop_fwd.gif" border=0></a><a href="#bot_img" title="Loop Controls :: TAIL" onclick="if (loopMode()) loopTail();"><img name="loop_tail" src="interface_images/loop_tail.gif" border=0></a><a href="#bot_img" title="Loop Controls :: INC SPEED" onclick="if (loopMode()) loopIncSpeed();"><img name="loop_incspeed" src="interface_images/loop_incspeed.gif" border=0></a><a href="#bot_img" title="Loop Controls :: DEC SPEED" onclick="if (loopMode()) loopDecSpeed();"><img name="loop_decspeed" src="interface_images/loop_decspeed.gif" border="0"></a><a href="#bot_img" title="Loop Controls :: INC FIRST/LAST DELAY" onclick="if (loopMode()) loopIncDelay();"><img name="loop_incdelay" src="interface_images/loop_incdelay.gif" border="0"></a><a href="#bot_img" title="Loop Controls :: DEC FIRST/LAST DELAY" onclick="if (loopMode()) loopDecDelay();"><img name="loop_decdelay" src="interface_images/loop_decdelay.gif" border="0"></a></td>
                                        </tr>
                                </table>
                        </td>
                        <td><img src="interface_images/botBarC.gif"></td>

                </tr>
</table>

EOHTML2

}

my $jscriptsrc = '<SCRIPT LANGUAGE = "JavaScript" src = "laps_products.js"></SCRIPT>';

my $title = "LAPS Real Time Forecast Products";

my $loc = "You are here: <a href='$webroot' class='loc'>Home</a> -> <a href='${webroot}cgi/fab_webproducts.cgi' class='loc'>Web Products</a> -> <a href='${webroot}forecasts' class='loc'>Forecasts</a>";

require ($directoryroot."includes/fabheader.inc");

&printheader($jscriptsrc,"",$title,$loc); # call the printheader function (prints the top of the HTML page)

#--------------------------------------------------------------------

if (param('model_selection'))
{
    &selection_made;
}
else
{
    &model_selection;
}

#--------------------------------------------------------------------

require ($directoryroot."includes/fabfooter.inc");

&printfooter(); # call the printfooter function (prints the bottom of the HTML page)
