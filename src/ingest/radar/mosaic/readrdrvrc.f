      subroutine read_rdr_vrc(cfname,x,y,z,record, Nx, Ny,
     + imax, jmax, kdim, kmax, ref_fcinv, Dx, Dy, La1,
     + Latin1, Latin2, Lo1, LoV, level, ref, reftime, valtime,
     + asctime, earth_shape, grid_name, grid_type, origin_name,
     + process_name, ref_comment, x_dim, y_dim, istatus)
C
C
C Routine reads radar files generated by remapper. Applicable to
C WFO installations and other remapper output in LAPS domain.
C
C J. Smart   12/98  Modified result from perl gennet.pl script
C
      include 'netcdf.inc'

      integer record, x, y,z,nf_fid, nf_vid, nf_status
      integer Nx, Ny, imax, jmax, kdim, kmax, ref_fcinv( z, record)

      real Dx, Dy, La1, Latin1, Latin2, Lo1, LoV, level, ref( x,  y, 
     +     z, record)

      double precision reftime(record), valtime(record)

      character*132 origin_name
      character*132 x_dim
      character*132 y_dim
      character*132 earth_shape
      character*132 asctime(record)
      character*132 grid_name
      character*132 process_name
      character*132 ref_comment( z, record)
      character*132 grid_type
      character*(*) cfname

      call read_rdr_head(cfname, x,y,z,record, Nx, Ny,
     + imax, jmax, kdim, kmax, ref_fcinv, Dx, Dy, La1,
     + Latin1, Latin2, Lo1, LoV, level, reftime, valtime,
     + asctime, earth_shape, grid_name, grid_type, origin_name,
     + process_name, ref_comment, x_dim, y_dim)

      call read_rdr_data(cfname,x,y,z,record,ref,istatus)
C
      return
      end
C
C  Subroutine to read the file "LAPS vrc file - NOWRAD 2D radar" 
C
      subroutine read_rdr_head(cfname, x,y,z,record, Nx, Ny,
     + imax,jmax,kdim, kmax, ref_fcinv, Dx, Dy, La1, Latin1, Latin2,
     + Lo1, LoV, level, reftime, valtime, asctime, earth_shape, 
     + grid_name, grid_type, origin_name, process_name, 
     + ref_comment, x_dim, y_dim)
C
      include 'netcdf.inc'

      integer record, x, y,z,nf_fid, nf_vid, nf_status
      integer Nx, Ny, imax, jmax, kdim, kmax
      integer ref_fcinv( z, record)

      real Dx, Dy, La1, Latin1, Latin2, Lo1, LoV, level

      double precision reftime(record), valtime(record)
      character*132 origin_name
      character*132 x_dim
      character*132 y_dim
      character*132 earth_shape
      character*132 asctime(record)
      character*132 grid_name
      character*132 process_name
      character*132 ref_comment( z, record)
      character*132 grid_type
      character*(*) cfname

      istatus = 0
C
C
C
      call get_rdr_dims(cfname,x,y,z,record,istatus)
      if(istatus .ne. 1)then
         print*,'error return - get_rdr_dims '
         return
      endif
C
C  Open netcdf File for reading
C
      nf_status = NF_OPEN(cfname,NF_NOWRITE,nf_fid)
      if(nf_status.ne.NF_NOERR) then
        call s_len(cfname,nf)
        print *, NF_STRERROR(nf_status)
        print *,'NF_OPEN ',cfname(1:nf)
        return
      endif
C
C   Variables of type REAL
C  ---------------------------
C
C     Variable        NETCDF Long Name
C      Dx           "x grid increment"
C
        nf_status = NF_INQ_VARID(nf_fid,'Dx',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Dx'
      endif
        nf_status = NF_GET_VAR_REAL(nf_fid,nf_vid,Dx)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Dx'
        return
      endif
C
C     Variable        NETCDF Long Name
C      Dy           "y grid increment"
C
        nf_status = NF_INQ_VARID(nf_fid,'Dy',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Dy'
      endif
        nf_status = NF_GET_VAR_REAL(nf_fid,nf_vid,Dy)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Dy'
        return
      endif
C
C     Variable        NETCDF Long Name
C      La1          "first latitude"
C
        nf_status = NF_INQ_VARID(nf_fid,'La1',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var La1'
      endif
        nf_status = NF_GET_VAR_REAL(nf_fid,nf_vid,La1)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var La1'
        return
      endif
C
C     Variable        NETCDF Long Name
C      Latin1       "orientation of grid"
C
        nf_status = NF_INQ_VARID(nf_fid,'Latin1',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Latin1'
      endif
        nf_status = NF_GET_VAR_REAL(nf_fid,nf_vid,Latin1)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Latin1'
        return
      endif
C
C     Variable        NETCDF Long Name
C      Latin2       "orientation of grid"
C
        nf_status = NF_INQ_VARID(nf_fid,'Latin2',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Latin2'
      endif
        nf_status = NF_GET_VAR_REAL(nf_fid,nf_vid,Latin2)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Latin2'
        return
      endif
C
C     Variable        NETCDF Long Name
C      Lo1          "first longitude"
C
        nf_status = NF_INQ_VARID(nf_fid,'Lo1',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Lo1'
      endif
        nf_status = NF_GET_VAR_REAL(nf_fid,nf_vid,Lo1)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Lo1'
        return
      endif
C
C     Variable        NETCDF Long Name
C      LoV          "orientation of grid"
C
        nf_status = NF_INQ_VARID(nf_fid,'LoV',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var LoV'
      endif
        nf_status = NF_GET_VAR_REAL(nf_fid,nf_vid,LoV)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var LoV'
        return
      endif
C
C     Variable        NETCDF Long Name
C      level        "level of data"
C
        nf_status = NF_INQ_VARID(nf_fid,'level',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var level'
      endif
        nf_status = NF_GET_VAR_REAL(nf_fid,nf_vid,level)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var level'
        return
      endif
C
C   Variables of type INT
C   ----------------------
C
C     Variable        NETCDF Long Name
C      Nx           "number of x points"
C
        nf_status = NF_INQ_VARID(nf_fid,'Nx',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Nx'
      endif
        nf_status = NF_GET_VAR_INT(nf_fid,nf_vid,Nx)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Nx'
        return
      endif
C
C     Variable        NETCDF Long Name
C      Ny           "number of y points"
C
        nf_status = NF_INQ_VARID(nf_fid,'Ny',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Ny'
      endif
        nf_status = NF_GET_VAR_INT(nf_fid,nf_vid,Ny)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var Ny'
        return
      endif
C
C     Variable        NETCDF Long Name
C      imax         
C
        nf_status = NF_INQ_VARID(nf_fid,'imax',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var imax'
      endif
        nf_status = NF_GET_VAR_INT(nf_fid,nf_vid,imax)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var imax'
        return
      endif
C
C     Variable        NETCDF Long Name
C      jmax         
C
        nf_status = NF_INQ_VARID(nf_fid,'jmax',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var jmax'
      endif
        nf_status = NF_GET_VAR_INT(nf_fid,nf_vid,jmax)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var jmax'
        return
      endif
C
C     Variable        NETCDF Long Name
C      kdim         
C
        nf_status = NF_INQ_VARID(nf_fid,'kdim',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var kdim'
      endif
        nf_status = NF_GET_VAR_INT(nf_fid,nf_vid,kdim)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var kdim'
        return
      endif
C
C     Variable        NETCDF Long Name
C      kmax         
C
        nf_status = NF_INQ_VARID(nf_fid,'kmax',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var kmax'
      endif
        nf_status = NF_GET_VAR_INT(nf_fid,nf_vid,kmax)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var kmax'
        return
      endif
C
C     Variable        NETCDF Long Name
C      ref_fcinv    
C
        nf_status = NF_INQ_VARID(nf_fid,'ref_fcinv',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var ref_fcinv'
      endif
        nf_status = NF_GET_VAR_INT(nf_fid,nf_vid,ref_fcinv)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var ref_fcinv'
        return
      endif

C   Variables of type DOUBLE
C   --------------------------
C
C     Variable        NETCDF Long Name
C      reftime      "reference time"
C
        nf_status = NF_INQ_VARID(nf_fid,'reftime',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var reftime'
      endif
        nf_status = NF_GET_VAR_DOUBLE(nf_fid,nf_vid,reftime)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var reftime'
        return
      endif
C
C     Variable        NETCDF Long Name
C      valtime      "valid time"
C
        nf_status = NF_INQ_VARID(nf_fid,'valtime',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var valtime'
      endif
        nf_status = NF_GET_VAR_DOUBLE(nf_fid,nf_vid,valtime)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var valtime'
        return
      endif

C   Variables of type CHAR
C   -----------------------
C
C     Variable        NETCDF Long Name
C      asctime      
C
        nf_status = NF_INQ_VARID(nf_fid,'asctime',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var asctime'
      endif
        nf_status = NF_GET_VAR_TEXT(nf_fid,nf_vid,asctime)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var asctime'
        return
      endif
C
C     Variable        NETCDF Long Name
C      earth_shape  
C
        nf_status = NF_INQ_VARID(nf_fid,'earth_shape',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var earth_shape'
      endif
        nf_status = NF_GET_VAR_TEXT(nf_fid,nf_vid,earth_shape)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var earth_shape'
        return
      endif
C
C     Variable        NETCDF Long Name
C      grid_name    
C
        nf_status = NF_INQ_VARID(nf_fid,'grid_name',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var grid_name'
      endif
        nf_status = NF_GET_VAR_TEXT(nf_fid,nf_vid,grid_name)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var grid_name'
        return
      endif
C
C     Variable        NETCDF Long Name
C      grid_type    "GRIB-1 grid type"
C
        nf_status = NF_INQ_VARID(nf_fid,'grid_type',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var grid_type'
      endif
        nf_status = NF_GET_VAR_TEXT(nf_fid,nf_vid,grid_type)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var grid_type'
        return
      endif
C
C     Variable        NETCDF Long Name
C      origin_name  
C
        nf_status = NF_INQ_VARID(nf_fid,'origin_name',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var origin_name'
      endif
        nf_status = NF_GET_VAR_TEXT(nf_fid,nf_vid,origin_name)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var origin_name'
        return
      endif
C
C     Variable        NETCDF Long Name
C      process_name 
C
        nf_status = NF_INQ_VARID(nf_fid,'process_name',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var process_name'
      endif
        nf_status = NF_GET_VAR_TEXT(nf_fid,nf_vid,process_name)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var process_name'
        return
      endif
C
C     Variable        NETCDF Long Name
C      ref_comment  
C
        nf_status = NF_INQ_VARID(nf_fid,'ref_comment',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var ref_comment'
      endif
        nf_status = NF_GET_VAR_TEXT(nf_fid,nf_vid,ref_comment)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var ref_comment'
        return
      endif
C
C     Variable        NETCDF Long Name
C      x_dim        "longitude dimension"
C
        nf_status = NF_INQ_VARID(nf_fid,'x_dim',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var x_dim'
      endif
        nf_status = NF_GET_VAR_TEXT(nf_fid,nf_vid,x_dim)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var x_dim'
        return
      endif
C
C     Variable        NETCDF Long Name
C      y_dim        "latitude dimension"
C
        nf_status = NF_INQ_VARID(nf_fid,'y_dim',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var y_dim'
      endif
        nf_status = NF_GET_VAR_TEXT(nf_fid,nf_vid,y_dim)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var y_dim'
        return
      endif

      nf_status = nf_close(nf_fid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'nf_close'
        return
      endif

      istatus = 1

      return
      end
c
c ***************************************************************
c
      subroutine get_rdr_dims(cfname,x,y,z,record,istatus)

      include 'netcdf.inc'
      integer x,y,z,record,nf
      integer  nf_fid, nf_vid, nf_status

      character*(*) cfname

      istatus=0  !return error status 
C
C  Open netcdf File for reading
C
      nf_status = NF_OPEN(cfname,NF_NOWRITE,nf_fid)
      if(nf_status.ne.NF_NOERR) then
        call s_len(cfname,nf)
        print *, NF_STRERROR(nf_status)
        print *,'NF_OPEN',cfname(1:nf)
        return
      endif

C   Dimension Variables
C
C Get size of record
C
      nf_status = NF_INQ_DIMID(nf_fid,'record',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'dim record'
      endif
      nf_status = NF_INQ_DIMLEN(nf_fid,nf_vid,record)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'dim record'
        return
      endif
C
C Get size of x
C
      nf_status = NF_INQ_DIMID(nf_fid,'x',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'dim x'
      endif
      nf_status = NF_INQ_DIMLEN(nf_fid,nf_vid,x)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'dim x'
        return
      endif
C
C Get size of y
C
      nf_status = NF_INQ_DIMID(nf_fid,'y',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'dim y'
      endif
      nf_status = NF_INQ_DIMLEN(nf_fid,nf_vid,y)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'dim y'
        return
      endif
C
C Get size of z
C
      nf_status = NF_INQ_DIMID(nf_fid,'z',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'dim z'
      endif
      nf_status = NF_INQ_DIMLEN(nf_fid,nf_vid,z)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'dim z'
        return
      endif
c
c close file
c
      nf_status = nf_close(nf_fid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'nf_close'
        return
      endif

      istatus = 1
      return
      end
c 
c ************************************************************************
c
      subroutine read_rdr_data(cfname,x,y,z,record,ref,istatus)
c
c
      integer nf_fid,x,y,z,record
      integer  ref(x, y, z, record)
      integer istatus
      character*(*) cfname

      istatus = 0  !default error return
C
C  Open netcdf File for reading
C
      nf_status = NF_OPEN(cfname,NF_NOWRITE,nf_fid)
      if(nf_status.ne.NF_NOERR) then
        call s_len(cfname,nf)
        print *, NF_STRERROR(nf_status)
        print *,'NF_OPEN ',cfname(1:nf)
        return
      endif
C
C     Variable        NETCDF Long Name
C      ref          "NOWRAD 2D radar reflectivity"
C
        nf_status = NF_INQ_VARID(nf_fid,'ref',nf_vid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var ref'
      endif
        nf_status = NF_GET_VAR_REAL(nf_fid,nf_vid,ref)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'in var ref'
        return
      endif
c
c close file
c
      nf_status = nf_close(nf_fid)
      if(nf_status.ne.NF_NOERR) then
        print *, NF_STRERROR(nf_status)
        print *,'nf_close'
        return
      endif

      istatus = 1
      return
      end
